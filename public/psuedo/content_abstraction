


$linkListViewDetails = ***REMOVED***
	type : 'nested_list_with_comments';
	input : ***REMOVED***
		model : 'links',
		template : 'link_list',
	***REMOVED***,
***REMOVED***;

$viewBlueprint = $viewBuilder.build($linkListViewDetails);

var $viewBuilder = ***REMOVED***
	build : function(specificType, input) ***REMOVED***
		specificViewDetails = specificView[specificType];
		baseViewDetails = baseViewMap[viewDetails.baseViewType];
		
		
		
		
	***REMOVED***,
	
	
	getTemplateFunctions(template, baseViewDetails, specificViewDetails) ***REMOVED***
		map(baseViewDetails)
	***REMOVED***
	setTemplateFunctions : function(viewType, template, templateFunctions) ***REMOVED***
				
		// iterate over the template functions and set them in the template
	***REMOVED***,
	
	
	// The general idea is that the specific view will be responsible for getting the params that will be used the construct the template function
	baseViewMap : ***REMOVED***
		list : ***REMOVED***
			templateFunctions [
				'getRows' => function($input) ***REMOVED***
					
					$listModel = $input['list_model'];
					$query = $input['query'];
					$processRow = $input['processRow'];
					return function() ***REMOVED***
						// call the readData method in the specified model and pass in the supplied query
						// get back the results
						// if there are any results
							// iterate over them and call process row 
						// return the result
					***REMOVED***
				***REMOVED***,
				'showCreateModal', => function($input) ***REMOVED***
					if($input['hasCreateModal'] ***REMOVED***
						return function() ***REMOVED***
							// get the session variable that is the model name + _create_modal_is_shown;
						***REMOVED***
					***REMOVED***
				***REMOVED***,
			],
			events [
				'create' => array(
					'type' => 'click',
					'function' => function($input) ***REMOVED***
						
					***REMOVED***
				),
				'sort',
				'page'
				'filter',
			],
		***REMOVED***,
		row : ***REMOVED***
			templateFunctions [
				'getHeader',
				'getBody',
			],
			events [
				
			],
		***REMOVED***,
	***REMOVED***,
	specificViewMap : ***REMOVED***
		simpleList ***REMOVED***
			baseType : list,
			input : ***REMOVED***
				hasCreateModal : true,
				listModel : links,
			***REMOVED***,
			'modelFunctions' => array(
				'links' => array(
					'create',
					'read',
				),
				'points' => array(
					'create',
				),
			),
			
		***REMOVED***,
	***REMOVED***,
	templateMap : ***REMOVED***
		link_list : ***REMOVED***
			specificViewType : simpleList,
			validate : ***REMOVED***
				
			***REMOVED***,
			
			
			
			
		***REMOVED***,
	***REMOVED***,
	
var	$modelBuilder = ***REMOVED***
	modelMap = ***REMOVED***
		links : ***REMOVED***
			methods : ***REMOVED***
				create : ***REMOVED******REMOVED***,
				read : ***REMOVED***
					query : ***REMOVED***
						
					***REMOVED***,
				***REMOVED***,
				update : ***REMOVED***
					query : ***REMOVED***
						
					***REMOVED***,
				***REMOVED***,
			***REMOVED***,
			allow : ***REMOVED***
				
			***REMOVED***,
		***REMOVED***,
		points : ***REMOVED***
			methods : ***REMOVED***
				create : ***REMOVED******REMOVED***,
				read : ***REMOVED***
					getQuery : function($params) ***REMOVED***
						// convert the params into a query!
					***REMOVED***,
				***REMOVED***,
				
			***REMOVED***,
			allow : ***REMOVED***
				
			***REMOVED***,
		***REMOVED***,
	***REMOVED***,
	methodMap : ***REMOVED***
		create : function($model, $methodDetails) ***REMOVED***
			return function($objectToCreate) ***REMOVED***
				Meteor[$model].insert($objectToCreate);	
			***REMOVED***,
		***REMOVED***,
		read : function($model, $methodDetails) ***REMOVED***
			
			return function($readParams) ***REMOVED***
				query = $methodDetais['getQuery']($readParams);
				result = Meteor[$model].find($query);
				return result;
			***REMOVED***;
			
		***REMOVED***,
		getPointsByDay : ***REMOVED***
			return function()
		***REMOVED***,
	***REMOVED***,
***REMOVED***
	
***REMOVED***;